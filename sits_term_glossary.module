<?php

/**
 * @file
 * Contains sits_term_glossary.module.
 */

use Drupal\Core\Cache\CacheBackendInterface;
use Drupal\Core\Config\ImmutableConfig;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_help().
 */
function sits_term_glossary_help($route_name) {
  switch ($route_name) {
    // Main module help for the glossary module.
    case 'help.page.sits_term_glossary':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('glossary module for plan') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function sits_term_glossary_theme() {
  return [
    'glossary_alphabetical_bock' => [
      'variables' => [
        'content' => NULL,
        'type' => NULL,
      ],
      'template' => 'glossary-alphabetical-bock',
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function sits_term_glossary_node_presave(EntityInterface $entity) {
  $type = $entity->getType();

  $config = _sits_term_glossary_get_config();
  $selected_types = _sits_term_glossary_get_config_content_types($config);

  if (sits_term_glossary_is_valid_type($type, $selected_types)) {
    $scan_fields = _sits_term_glossary_get_selected_fields_from_config($config, $type);
    sits_term_glossary_process_scan_fields($entity, $scan_fields, $config);
  }
}

/**
 * Check if the content type is valid.
 */
function sits_term_glossary_is_valid_type($type, $selected_types) {
  return !empty($type) && !empty($selected_types) && in_array($type, $selected_types);
}

/**
 * Process the scan fields.
 */
function sits_term_glossary_process_scan_fields(EntityInterface $entity, $scan_fields, ImmutableConfig $config) {
  if (!empty($scan_fields)) {
    $vocab = $config->get('vocab');
    $term_list = _sits_term_glossary_get_terms($vocab);
    if (!empty($term_list)) {
      foreach ($scan_fields as $field_name_to_scan) {
        sits_term_glossary_process_single_field($entity, $field_name_to_scan, $term_list);
      }
    }
  }
}

/**
 * Process a single field.
 */
function sits_term_glossary_process_single_field(EntityInterface $entity, $field_name_to_scan, $term_list) {
  // $value_raw = NULL;
  $class = get_class($entity->{$field_name_to_scan});
  if ($class == 'Drupal\Core\Field\FieldItemList') {
    sits_term_glossary_process_field_item_list($entity, $field_name_to_scan, $term_list);
  }
  if ($class == 'Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList') {
    sits_term_glossary_process_entity_reference_revisions_field_item_list($entity, $field_name_to_scan, $term_list);
  }
}

/**
 * Process Drupal\Core\Field\FieldItemList class.
 */
function sits_term_glossary_process_field_item_list(EntityInterface $entity, $field_name_to_scan, $term_list) {
  if (!empty($entity->{$field_name_to_scan}->value)) {
    $value_raw = $entity->{$field_name_to_scan}->value;
    if ($value_raw) {
      $new_value = _sits_term_glossary_replace_field_value($value_raw, $term_list);
      if ($field_name_to_scan == 'body') {
        $entity->{$field_name_to_scan} = [
          'format' => 'full_html',
          'value' => $new_value,
        ];
        // Early return after the processing is done.
        return;
      }
      $entity->set($field_name_to_scan, $new_value);
    }
  }
}

/**
 * Process Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItLst.
 */
function sits_term_glossary_process_entity_reference_revisions_field_item_list(EntityInterface $entity, $field_name_to_scan, $term_list) {
  if (!empty($entity->{$field_name_to_scan}->referencedEntities())) {
    $entities = $entity->{$field_name_to_scan}->referencedEntities();
    _sits_term_glossary_replace_entity_ref_fields_values($entities, $term_list);
  }
}

/**
 * Helper for EntityReferenceRevisionsFieldItemList fields to be replaced.
 *
 * @param array|null $entities
 *   An array of Entities.
 * @param array|null $term_list
 *   Array of term lists.
 */
function _sits_term_glossary_replace_entity_ref_fields_values($entities, $term_list) {
  // This is used so our paragraph fields can be scanned as well.
  $accept_only = [
    'text_with_summary',
    'text_long',
    'string_long',
    'text',
  ];
  foreach ($entities as $entity) {
    $entity_type_id = $entity->getEntityType()->id();
    $bundle = $entity->bundle();
    if (!empty($entity_type_id) && !empty($bundle)) {
      $field_definition = \Drupal::service('entity_field.manager')->getFieldDefinitions($entity_type_id, $bundle);
      foreach ($field_definition as $key => $def) {
        if (get_class($def) === 'Drupal\field\Entity\FieldConfig') {
          try {
            $field_type = $def->get('field_type');
            if (in_array($field_type, $accept_only)) {
              $value_raw = $entity->{$key}->value;
              if (!empty($value_raw)) {
                $new_value = _sits_term_glossary_replace_field_value($value_raw, $term_list);
                $entity->{$key} = [
                  'format' => 'full_html',
                  'value' => $new_value,
                ];
                $entity->save();
              }
            }
          }
          catch (\Exception $e) {
            // @todo probably log this.
          }
        }
      }
    }
  }
}

/**
 * Helper function to replace term with value.
 *
 * @param mixed $value_raw
 *   The raw value.
 * @param array|null $term_list
 *   The term list.
 *
 * @return string
 *   returns a string.
 */
function _sits_term_glossary_replace_field_value($value_raw, $term_list) {
  // @todo Here handle more field types.
  $is_single__match = \Drupal::config('sits_term_glossary.glossaryconfig')->get('single_match');
  $new_value = '';
  if (!empty($value_raw)) {
    $new_value = $value_raw;
    foreach ($term_list as $term_id => $term_array) {
      $name = preg_quote($term_array['name'], '/');
      preg_match_all("/$name+/i", $new_value, $matches);
      if (is_array($matches[0]) && count($matches[0]) >= 1) {
        $matches = array_unique($matches[0]);
        foreach ($matches as $match) {
          if ($is_single__match) {
            $offset = strpos($new_value, $match);
            $length = strlen($match);
            $new_value = substr_replace($new_value, '<span class="glos-term" data-gterm="' . $term_id . '">' . $match . '</span>', $offset, $length);
            break;
          }
          $new_value = str_replace($match, '<span class="glos-term" data-gterm="' . $term_id . '">' . $match . '</span>', $new_value);
        }
      }
    }
  }
  return $new_value;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function sits_term_glossary_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $type = $entity->getType();
  if (!empty($type)) {
    $config = _sits_term_glossary_get_config();
    $selected_types = _sits_term_glossary_get_config_content_types($config);
    if (!empty($selected_types) && in_array($type, $selected_types)) {
      // @todo support make this configurable.
      $integration_type = $config->get('integration_type');
      if ($view_mode == 'full' && $integration_type == 'default') {
        $build['#attached']['library'][] = 'sits_term_glossary/glossary-css';
        $build['#attached']['library'][] = 'sits_term_glossary/glossary-js';
        $build['glossary-dialog'] = [
          '#type' => 'markup',
          '#markup' => '<div id="glossary-dialog" title="Term definition"><div id="glossary-dialog-inner"></div></div>',
        ];
      }
    }
  }
}

/**
 * This function gets terms in key value optimised for speed.
 *
 * @param string $vocab
 *   The vocab name.
 *
 * @return array|EntityInterface[]
 *   Returns and array.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function _sits_term_glossary_get_terms($vocab) {
  $cid = 'glossary_terms_array';
  $data = \Drupal::cache()->get($cid);
  if (!empty($data)) {
    $query = \Drupal::entityQuery('taxonomy_term')
      ->condition('vid', $vocab)
      ->accessCheck(TRUE);
    $entity_ids = $query->execute();

    // If count matches, return from cache.
    if (count($entity_ids) == count($data->data)) {
      return $data->data;
    }
  }

  // Cache is empty OR count doesn't match. Load terms and cache them.
  $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $terms = $term_storage->loadByProperties(['vid' => $vocab]);
  $terms_array = [];
  foreach ($terms as $tid => $term) {
    $terms_array[$tid] = [
      'tid' => $tid,
      'name' => $term->getName(),
    ];
  }
  \Drupal::cache()->set($cid, $terms_array, CacheBackendInterface::CACHE_PERMANENT, []);

  return $terms_array;
}

/**
 * Helper function to get field form config.
 */
function _sits_term_glossary_get_selected_fields_from_config(ImmutableConfig $config, $content_type) {
  $fields = [];
  $raw = $config->get('selected_fields');
  if ($content_type == 'all') {
    $fields = $raw;
    // Return fields directly.
    return $fields;
  }

  if (!empty($raw[$content_type])) {
    $fields = $raw[$content_type];
  }

  return $fields;
}

/**
 * Helper to get the glossary config.
 *
 * @return mixed
 *   Returns the config object or null.
 */
function _sits_term_glossary_get_config() {
  $configFactory = \Drupal::service('config.manager')->getConfigFactory();
  return $configFactory->get('sits_term_glossary.glossaryconfig');
}

/**
 * Function to get the selected content types from config.
 *
 * @param \Drupal\Core\Config\ImmutableConfig $config
 *   The config.
 *
 * @return array
 *   Returns an array I hope.
 */
function _sits_term_glossary_get_config_content_types(ImmutableConfig $config) {
  $return = [];
  $selected_config = $config->get('content_types');
  if (!empty($selected_config)) {
    $selected = [];
    foreach ($selected_config as $key => $val) {
      if ($key == $val) {
        $selected[] = $val;
      }
    }
  }
  if (!empty($selected)) {
    $return = $selected;
  }
  return $return;
}
